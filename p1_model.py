# -*- coding: utf-8 -*-
"""p1_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1noJndnOCSzFZ_qoIYy64UFtxeX9cVUgt
"""

# Import libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Load dataset
data = pd.read_excel('shipment.xlsx')  # Replace with actual file path
X = data.drop(columns=['Delayed'])
y = data['Delayed'].map({'Yes': 1, 'No': 0})  # Encode target

# Data preprocessing
numeric_features = ['Distance (km)']
categorical_features = ['Origin', 'Destination', 'Vehicle Type', 'Weather Conditions', 'Traffic Conditions']

preprocessor = ColumnTransformer([
    ('num', StandardScaler(), numeric_features),
    ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
])

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model definitions
rf = RandomForestClassifier(random_state=42)
lr = LogisticRegression(random_state=42)
gb = GradientBoostingClassifier(random_state=42)

# Ensemble voting classifier
ensemble = VotingClassifier(estimators=[
    ('rf', rf), ('lr', lr), ('gb', gb)
], voting='soft')

# Create pipeline
pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('classifier', ensemble)
])

# Train the model
pipeline.fit(X_train, y_train)

# Evaluate the model
y_pred = pipeline.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred))
print("Recall:", recall_score(y_test, y_pred))
print("F1 Score:", f1_score(y_test, y_pred))

# Save the model for API usage
import joblib
joblib.dump(pipeline, 'shipment_delay_model.pkl')